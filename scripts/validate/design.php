#!/usr/bin/env php
<?php
/**
 * design.md „Çí Single Source of Truth „Å®„Åó„Å¶„ÄÅÂÆüË£Ö„Å®„ÅÆÊï¥ÂêàÊÄß„ÇíÊ§úË®ºÔºàÊ±éÁî®ÁâàÔºâ
 *
 * ‰ΩøÁî®ÊñπÊ≥ï:
 *   ./validate-design.php [spec-name]
 *
 * ‰æã:
 *   ./validate-design.php user-authentication
 *   ./validate-design.php user-password-reset
 *
 * spec-name„ÅåÊåáÂÆö„Åï„Çå„Å™„ÅÑÂ†¥Âêà„ÄÅÂÖ®„Å¶„ÅÆspec„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åæ„Åô„ÄÇ
 *
 * Ê§úË®ºÈ†ÖÁõÆÔºö
 * 1. design.md „ÅßÂÆöÁæ©„Åï„Çå„Åü„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„É´„Éº„É´„Åå FormRequest „Å´ÂÆüË£Ö„Åï„Çå„Å¶„ÅÑ„Çã„Åã
 * 2. „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ (useDynamicForm) „Å®„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ (FormRequest) „ÅÆ„Éï„Ç£„Éº„É´„ÉâÂêç„Åå‰∏ÄËá¥„Åó„Å¶„ÅÑ„Çã„Åã
 * 3. ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„Åå both sides „Åß required „Å´„Å™„Å£„Å¶„ÅÑ„Çã„Åã
 */

declare(strict_types=1);

$projectRoot = dirname(__DIR__, 3);
require_once $projectRoot . '/vendor/autoload.php';

// Ëâ≤ÂÆöÁæ©
const RED = "\033[0;31m";
const GREEN = "\033[0;32m";
const YELLOW = "\033[1;33m";
const BLUE = "\033[0;34m";
const NC = "\033[0m"; // No Color

$errors = 0;
$warnings = 0;

// „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„Åã„Çâ spec name „ÇíÂèñÂæó
$specName = $argv[1] ?? null;

echo BLUE . "üîç Validation Integrity Check (design.md as Single Source of Truth)" . NC . "\n";
echo str_repeat("=", 80) . "\n";
if ($specName) {
    echo "Spec: " . BLUE . $specName . NC . "\n";
} else {
    echo YELLOW . "No spec specified. Checking all specs..." . NC . "\n";
}
echo "\n";

/**
 * design.md „Åã„Çâ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥Ë¶Å‰ª∂„ÇíÊäΩÂá∫
 *
 * „Çª„ÇØ„Ç∑„Éß„É≥„Çø„Ç§„Éà„É´„Äå**„Éê„É™„Éá„Éº„Ç∑„Éß„É≥È†ÖÁõÆË©≥Á¥∞**:„Äç„ÅßÊäΩÂá∫ÔºàÊ±éÁî®ÁöÑÔºâ
 */
function parseDesignMd(string $designPath): array
{
    if (!file_exists($designPath)) {
        return [];
    }

    $content = file_get_contents($designPath);
    $validationRules = [];

    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥È†ÖÁõÆË©≥Á¥∞„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÊäΩÂá∫Ôºà„Çø„Ç§„Éà„É´„Éô„Éº„Çπ„ÄÅË°åÁï™Âè∑„Å´‰æùÂ≠ò„Åó„Å™„ÅÑÔºâ
    if (preg_match('/\*\*„Éê„É™„Éá„Éº„Ç∑„Éß„É≥È†ÖÁõÆË©≥Á¥∞\*\*:(.*?)(?=\n\n\*\*|$)/s', $content, $matches)) {
        $validationSection = $matches[1];

        // ÂêÑ„Éï„Ç£„Éº„É´„Éâ„ÅÆ„É´„Éº„É´„ÇíËß£Êûê
        $lines = explode("\n", $validationSection);
        foreach ($lines as $line) {
            // ‰æã: - `name`: ÂøÖÈ†à„ÄÅ2ÊñáÂ≠ó‰ª•‰∏ä„ÄÅ255ÊñáÂ≠ó‰ª•‰∏ã
            // „Åæ„Åü„ÅØ: - `agreeToTerms`: ÂøÖÈ†à„ÄÅ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÄÅÂà©Áî®Ë¶èÁ¥Ñ„Å∏„ÅÆÂêåÊÑèÔºàacceptedÔºâ
            if (preg_match('/- `([a-zA-Z_]+)`:\s*(.+)/', $line, $fieldMatch)) {
                $field = $fieldMatch[1];
                $rules = $fieldMatch[2];

                $validationRules[$field] = [
                    'raw' => $rules,
                    'required' => str_contains($rules, 'ÂøÖÈ†à'),
                    'min' => preg_match('/(\d+)ÊñáÂ≠ó‰ª•‰∏ä/', $rules, $m) ? (int)$m[1] : null,
                    'max' => preg_match('/(\d+)ÊñáÂ≠ó‰ª•‰∏ã/', $rules, $m) ? (int)$m[1] : null,
                    'email' => str_contains($rules, '„É°„Éº„É´ÂΩ¢Âºè'),
                    'unique' => str_contains($rules, 'ÈáçË§áÁ¶ÅÊ≠¢'),
                    'regex' => str_contains($rules, 'Ëã±Â≠ó„Å®Êï∞Â≠ó') || str_contains($rules, 'ÂçäËßíÊï∞Â≠ó„ÅÆ„Åø'),
                    'accepted' => str_contains($rules, 'accepted') || str_contains($rules, 'ÂêåÊÑè'),
                    'same' => preg_match('/(.+)„Å®‰∏ÄËá¥/', $rules, $m) ? $m[1] : null,
                ];
            }
        }
    }

    return $validationRules;
}

/**
 * design.md„Åã„ÇâÂØæÂøú„Åô„ÇãFormRequest„ÇØ„É©„ÇπÂêç„ÇíÊé®Ê∏¨
 */
function inferFormRequestClass(string $specName, array $designRules): ?string
{
    // design.md„Å´Ë®òËºâ„Åï„Çå„Å¶„ÅÑ„ÇãRequest„ÇØ„É©„Çπ„ÇíÊé¢„Åô
    $designPath = dirname(__DIR__, 2) . "/docs/specs/$specName/design.md";
    if (!file_exists($designPath)) {
        return null;
    }

    $content = file_get_contents($designPath);

    // PresentationÂ±§„ÅÆRequests„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÊé¢„Åô
    if (preg_match('/Requests.*?:\s*([A-Z][a-zA-Z]+Request)/s', $content, $matches)) {
        $requestClassName = $matches[1];

        // „É¢„Ç∏„É•„Éº„É´Âêç„ÇíÊé®Ê∏¨Ôºàspec-name„Åã„ÇâPascalCase„Å∏Â§âÊèõÔºâ
        $moduleName = str_replace(' ', '', ucwords(str_replace('-', ' ', explode('-', $specName)[0])));

        return "App\\Modules\\{$moduleName}\\Presentation\\Requests\\{$requestClassName}";
    }

    return null;
}

/**
 * design.md„Åã„ÇâÂØæÂøú„Åô„Çã„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éï„Ç°„Ç§„É´„ÇíÊé®Ê∏¨
 */
function inferFrontendFile(string $specName, string $projectRoot): ?string
{
    // spec-name „Åã„ÇâÊé®Ê∏¨Ôºà‰æã: user-authentication ‚Üí Auth/Signup.tsx, Auth/Login.tsxÔºâ
    $designPath = dirname(__DIR__, 2) . "/docs/specs/$specName/design.md";
    if (!file_exists($designPath)) {
        return null;
    }

    $content = file_get_contents($designPath);

    // UIË®≠Ë®à„Çª„ÇØ„Ç∑„Éß„É≥„Åã„ÇâÁîªÈù¢URL„Å®„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÊäΩÂá∫
    if (preg_match_all('/\|\s*([^\|]+?)\s*\|\s*`([^`]+)`\s*\|/m', $content, $matches, PREG_SET_ORDER)) {
        foreach ($matches as $match) {
            $screenName = trim($match[1]);
            $url = trim($match[2]);

            // ÁôªÈå≤„Éª„Çµ„Ç§„É≥„Ç¢„ÉÉ„ÉóÁ≥ª„ÅÆÁîªÈù¢„ÇíÂÑ™ÂÖà
            if (str_contains($screenName, 'ÁôªÈå≤') || str_contains($url, 'signup') || str_contains($url, 'register')) {
                // URL„Åã„Çâ„Éï„Ç°„Ç§„É´Âêç„ÇíÊé®Ê∏¨
                $path = trim($url, '/');
                $fileName = ucfirst($path) . '.tsx';

                // „Çà„Åè„ÅÇ„Çã„Éë„Çø„Éº„É≥„ÇíË©¶„Åô
                $possibilities = [
                    $projectRoot . "/resources/js/Pages/Auth/Signup.tsx",
                    $projectRoot . "/resources/js/Pages/Auth/Register.tsx",
                    $projectRoot . "/resources/js/Pages/" . ucfirst($path) . ".tsx",
                ];

                foreach ($possibilities as $possiblePath) {
                    if (file_exists($possiblePath)) {
                        return $possiblePath;
                    }
                }
            }
        }
    }

    return null;
}

/**
 * FormRequest „Åã„Çâ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„É´„Éº„É´„ÇíÊäΩÂá∫
 */
function parseFormRequest(string $className): array
{
    if (!class_exists($className)) {
        return [];
    }

    $instance = new $className();
    if (!method_exists($instance, 'rules')) {
        return [];
    }

    return $instance->rules();
}

/**
 * „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éï„Ç°„Ç§„É´„Åã„Çâ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÂÆöÁæ©„ÇíÊäΩÂá∫
 */
function parseFrontendValidation(string $tsxPath): array
{
    if (!file_exists($tsxPath)) {
        return [];
    }

    $content = file_get_contents($tsxPath);
    $validationFields = [];

    // validation „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÊäΩÂá∫Ôºà„Éç„Çπ„Éà„Åï„Çå„ÅüÊßãÈÄ†„Å´ÂØæÂøúÔºâ
    if (preg_match('/validation:\s*\{(.*?)(?=\s*\},\s*onSubmit)/s', $content, $matches)) {
        $validationBlock = $matches[1];

        // ÂêÑ„Éï„Ç£„Éº„É´„Éâ„ÇíÊäΩÂá∫ÔºàÊîπË°å„Å®„Ç§„É≥„Éá„É≥„Éà„Å´ÂØæÂøúÔºâ
        preg_match_all('/^\s+([a-z_]+):\s*\[(.*?)\]/sm', $validationBlock, $fieldMatches, PREG_SET_ORDER);

        foreach ($fieldMatches as $match) {
            $field = trim($match[1]);
            $rules = $match[2];

            // Ë§áÊï∞Ë°å„Å´„Åæ„Åü„Åå„Çã„É´„Éº„É´ÂÆöÁæ©„ÇíÁµêÂêà
            $rules = preg_replace('/\s+/', ' ', $rules);

            // custom„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Åß„ÇÇÂøÖÈ†à„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„Åå„ÅÇ„Çã„Åü„ÇÅÁ¢∫Ë™ç
            $isCustomRequired = str_contains($rules, "type: 'custom'") &&
                                (str_contains($rules, 'value === true') || str_contains($rules, 'ÂêåÊÑè'));

            $validationFields[$field] = [
                'required' => str_contains($rules, "type: 'required'") || $isCustomRequired,
                'email' => str_contains($rules, "type: 'email'"),
                'minLength' => preg_match('/minLength.*?value:\s*(\d+)/', $rules, $m) ? (int)$m[1] : null,
                'maxLength' => preg_match('/maxLength.*?value:\s*(\d+)/', $rules, $m) ? (int)$m[1] : null,
                'pattern' => str_contains($rules, "type: 'pattern'"),
                'custom' => str_contains($rules, "type: 'custom'"),
            ];
        }
    }

    return $validationFields;
}

/**
 * design.md „ÅÆ„É´„Éº„É´„Å® FormRequest „ÅÆÂÆüË£Ö„ÇíÊØîËºÉ
 */
function validateBackendImplementation(array $designRules, array $backendRules, string $requestName): int
{
    global $errors, $warnings;
    $localErrors = 0;

    echo BLUE . "\nüìã Checking: $requestName" . NC . "\n";
    echo str_repeat("-", 80) . "\n";

    if (empty($backendRules)) {
        echo RED . "‚ùå No validation rules found in $requestName" . NC . "\n";
        return 1;
    }

    foreach ($designRules as $field => $expectedRules) {
        if (!isset($backendRules[$field])) {
            echo RED . "‚ùå Field '$field' is defined in design.md but missing in $requestName" . NC . "\n";
            $localErrors++;
            continue;
        }

        $actualRules = is_array($backendRules[$field]) ? $backendRules[$field] : explode('|', $backendRules[$field]);

        // ÂøÖÈ†à„ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['required'] && !in_array('required', $actualRules)) {
            echo RED . "‚ùå Field '$field': design.md says REQUIRED but 'required' rule is missing" . NC . "\n";
            $localErrors++;
        }

        // „É¶„Éã„Éº„ÇØ„ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['unique']) {
            $hasUnique = false;
            foreach ($actualRules as $rule) {
                if (str_starts_with($rule, 'unique:')) {
                    $hasUnique = true;
                    break;
                }
            }
            if (!$hasUnique) {
                echo RED . "‚ùå Field '$field': design.md says UNIQUE but 'unique' rule is missing" . NC . "\n";
                $localErrors++;
            }
        }

        // „É°„Éº„É´ÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['email'] && !in_array('email', $actualRules)) {
            echo RED . "‚ùå Field '$field': design.md says EMAIL FORMAT but 'email' rule is missing" . NC . "\n";
            $localErrors++;
        }

        // accepted „ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['accepted'] && !in_array('accepted', $actualRules)) {
            echo RED . "‚ùå Field '$field': design.md says ACCEPTED but 'accepted' rule is missing" . NC . "\n";
            $localErrors++;
        }

        // ÊúÄÂ∞èÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['min'] !== null) {
            $hasMin = false;
            foreach ($actualRules as $rule) {
                if (str_starts_with($rule, 'min:') && (int)substr($rule, 4) === $expectedRules['min']) {
                    $hasMin = true;
                    break;
                }
            }
            if (!$hasMin) {
                echo YELLOW . "‚ö†Ô∏è  Field '$field': design.md says MIN:{$expectedRules['min']} but rule is missing or different" . NC . "\n";
                $warnings++;
            }
        }

        // ÊúÄÂ§ßÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['max'] !== null) {
            $hasMax = false;
            foreach ($actualRules as $rule) {
                if (str_starts_with($rule, 'max:') && (int)substr($rule, 4) === $expectedRules['max']) {
                    $hasMax = true;
                    break;
                }
            }
            if (!$hasMax) {
                echo YELLOW . "‚ö†Ô∏è  Field '$field': design.md says MAX:{$expectedRules['max']} but rule is missing or different" . NC . "\n";
                $warnings++;
            }
        }

        // Ê≠£Ë¶èË°®Áèæ„ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['regex']) {
            $hasRegex = false;
            foreach ($actualRules as $rule) {
                if (str_starts_with($rule, 'regex:')) {
                    $hasRegex = true;
                    break;
                }
            }
            if (!$hasRegex) {
                echo RED . "‚ùå Field '$field': design.md says REGEX PATTERN but 'regex' rule is missing" . NC . "\n";
                $localErrors++;
            }
        }

        // same „ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['same'] !== null) {
            $hasSame = false;
            foreach ($actualRules as $rule) {
                if (str_starts_with($rule, 'same:')) {
                    $hasSame = true;
                    break;
                }
            }
            if (!$hasSame) {
                echo RED . "‚ùå Field '$field': design.md says SAME:{$expectedRules['same']} but 'same' rule is missing" . NC . "\n";
                $localErrors++;
            }
        }
    }

    if ($localErrors === 0) {
        echo GREEN . "‚úÖ All backend validation rules match design.md" . NC . "\n";
    }

    $errors += $localErrors;
    return $localErrors;
}

/**
 * design.md „ÅÆ„É´„Éº„É´„Å®„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅÆÂÆüË£Ö„ÇíÊØîËºÉ
 */
function validateFrontendImplementation(array $designRules, array $frontendRules, string $componentName): int
{
    global $errors, $warnings;
    $localErrors = 0;

    echo BLUE . "\nüìã Checking: $componentName (Frontend)" . NC . "\n";
    echo str_repeat("-", 80) . "\n";

    if (empty($frontendRules)) {
        echo YELLOW . "‚ö†Ô∏è  No frontend validation found in $componentName" . NC . "\n";
        $warnings++;
        return 0;
    }

    foreach ($designRules as $field => $expectedRules) {
        // „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Åß„ÅØ terms_agreed „Çí‰ΩøÁî®
        $actualField = ($field === 'agreeToTerms') ? 'terms_agreed' : $field;

        if (!isset($frontendRules[$actualField])) {
            echo YELLOW . "‚ö†Ô∏è  Field '$field' (frontend: $actualField) is defined in design.md but missing in frontend validation" . NC . "\n";
            $warnings++;
            continue;
        }

        $actualRules = $frontendRules[$actualField];

        // ÂøÖÈ†à„ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['required'] && !$actualRules['required']) {
            echo RED . "‚ùå Field '$field': design.md says REQUIRED but frontend validation is missing" . NC . "\n";
            $localErrors++;
        }

        // „É°„Éº„É´ÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['email'] && !$actualRules['email']) {
            echo RED . "‚ùå Field '$field': design.md says EMAIL FORMAT but frontend validation is missing" . NC . "\n";
            $localErrors++;
        }

        // ÊúÄÂ∞èÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['min'] !== null && $actualRules['minLength'] !== $expectedRules['min']) {
            echo YELLOW . "‚ö†Ô∏è  Field '$field': design.md says MIN:{$expectedRules['min']} but frontend has MIN:{$actualRules['minLength']}" . NC . "\n";
            $warnings++;
        }

        // ÊúÄÂ§ßÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ
        if ($expectedRules['max'] !== null && $actualRules['maxLength'] !== $expectedRules['max']) {
            echo YELLOW . "‚ö†Ô∏è  Field '$field': design.md says MAX:{$expectedRules['max']} but frontend has MAX:{$actualRules['maxLength']}" . NC . "\n";
            $warnings++;
        }
    }

    if ($localErrors === 0) {
        echo GREEN . "‚úÖ All frontend validation rules match design.md" . NC . "\n";
    }

    $errors += $localErrors;
    return $localErrors;
}

/**
 * design.md„Åã„ÇâÂøÖË¶Å„Å™„Éö„Éº„Ç∏‰∏ÄË¶ß„ÇíÊäΩÂá∫
 */
function extractPagesFromDesignMd(string $designPath): array
{
    if (!file_exists($designPath)) {
        return [];
    }

    $content = file_get_contents($designPath);
    $pages = [];

    // **ÁîªÈù¢‰∏ÄË¶ß**: „Çª„ÇØ„Ç∑„Éß„É≥„Åã„Çâ„Éö„Éº„Ç∏„ÇíÊäΩÂá∫
    if (preg_match('/\*\*ÁîªÈù¢‰∏ÄË¶ß\*\*:(.*?)(?=\n\n\*\*|$)/s', $content, $matches)) {
        $section = $matches[1];
        $lines = explode("\n", $section);
        foreach ($lines as $line) {
            // ‰æã: - „É≠„Ç∞„Ç§„É≥ÁîªÈù¢ (`Login.tsx`)
            if (preg_match('/`([A-Za-z]+\.tsx)`/', $line, $m)) {
                $pages[] = $m[1];
            }
        }
    }

    return $pages;
}

/**
 * design.md„Åã„ÇâÂøÖË¶Å„Å™„É´„Éº„Éà‰∏ÄË¶ß„ÇíÊäΩÂá∫
 */
function extractRoutesFromDesignMd(string $designPath): array
{
    if (!file_exists($designPath)) {
        return [];
    }

    $content = file_get_contents($designPath);
    $routes = [];

    // **„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà**: „Çª„ÇØ„Ç∑„Éß„É≥„Åã„Çâ„É´„Éº„Éà„ÇíÊäΩÂá∫
    if (preg_match('/\*\*„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà\*\*:(.*?)(?=\n\n\*\*|$)/s', $content, $matches)) {
        $section = $matches[1];
        $lines = explode("\n", $section);
        foreach ($lines as $line) {
            // ‰æã: - POST `/register` - „É¶„Éº„Ç∂„ÉºÁôªÈå≤Âá¶ÁêÜ
            if (preg_match('/(GET|POST|PUT|DELETE|PATCH)\s+`([^`]+)`/', $line, $m)) {
                $routes[] = [
                    'method' => $m[1],
                    'path' => $m[2],
                ];
            }
        }
    }

    return $routes;
}

/**
 * „Éö„Éº„Ç∏„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆÂ≠òÂú®Á¢∫Ë™ç
 */
function validatePages(string $specName, array $pages): int
{
    global $projectRoot, $errors;

    $localErrors = 0;

    echo "\n" . str_repeat("=", 80) . "\n";
    echo "Page Components Existence Check\n";
    echo str_repeat("=", 80) . "\n";

    if (empty($pages)) {
        echo YELLOW . "‚ö†Ô∏è  No pages defined in design.md" . NC . "\n";
        return 0;
    }

    echo "Checking " . count($pages) . " page component(s)...\n";

    foreach ($pages as $page) {
        $pagePath = "$projectRoot/resources/js/Pages/Auth/$page";
        if (!file_exists($pagePath)) {
            echo RED . "‚ùå Page component NOT FOUND: $page" . NC . "\n";
            echo RED . "   Expected at: $pagePath" . NC . "\n";
            $localErrors++;
            $errors++;
        } else {
            echo GREEN . "‚úÖ $page exists" . NC . "\n";

            // useDynamicForm„ÅÆ‰ΩøÁî®Á¢∫Ë™ç
            $content = file_get_contents($pagePath);
            if (!str_contains($content, 'useDynamicForm')) {
                echo RED . "‚ùå $page does NOT use useDynamicForm hook" . NC . "\n";
                echo RED . "   This violates the project requirement" . NC . "\n";
                $localErrors++;
                $errors++;
            }

            // Inertia useForm„ÅÆ‰ΩøÁî®Ê§úÂá∫ÔºàÁ¶ÅÊ≠¢‰∫ãÈ†ÖÔºâ
            if (str_contains($content, 'useForm')) {
                echo RED . "‚ùå $page uses Inertia useForm (FORBIDDEN)" . NC . "\n";
                echo RED . "   Must use useDynamicForm instead" . NC . "\n";
                $localErrors++;
                $errors++;
            }
        }
    }

    return $localErrors;
}

/**
 * „É´„Éº„ÉàÂÆöÁæ©„ÅÆÂ≠òÂú®Á¢∫Ë™ç
 */
function validateRoutes(string $specName, array $routes): int
{
    global $projectRoot, $errors;

    $localErrors = 0;

    echo "\n" . str_repeat("=", 80) . "\n";
    echo "Routes Definition Check\n";
    echo str_repeat("=", 80) . "\n";

    if (empty($routes)) {
        echo YELLOW . "‚ö†Ô∏è  No routes defined in design.md" . NC . "\n";
        return 0;
    }

    $webRoutesPath = "$projectRoot/routes/web.php";
    if (!file_exists($webRoutesPath)) {
        echo RED . "‚ùå routes/web.php NOT FOUND" . NC . "\n";
        $errors++;
        return 1;
    }

    $routesContent = file_get_contents($webRoutesPath);

    echo "Checking " . count($routes) . " route(s)...\n";

    foreach ($routes as $route) {
        $method = strtolower($route['method']);
        $path = $route['path'];

        // „É´„Éº„ÉàÂÆöÁæ©„ÅÆ„Éë„Çø„Éº„É≥„ÇíÊ§úÁ¥¢
        // ‰æã: Route::post('/register', ...)
        $pattern = "/Route::$method\s*\(\s*['\"]" . preg_quote($path, '/') . "['\"]/";

        if (!preg_match($pattern, $routesContent)) {
            echo RED . "‚ùå Route NOT FOUND: {$route['method']} $path" . NC . "\n";
            echo RED . "   Expected in: routes/web.php" . NC . "\n";
            $localErrors++;
            $errors++;
        } else {
            echo GREEN . "‚úÖ {$route['method']} $path is defined" . NC . "\n";
        }
    }

    return $localErrors;
}

/**
 * ÊåáÂÆö„Åï„Çå„Åüspec„ÇíÊ§úË®º
 */
function validateSpec(string $specName): void
{
    global $projectRoot, $errors, $warnings;

    echo "\n" . str_repeat("=", 80) . "\n";
    echo BLUE . "Validating Spec: $specName" . NC . "\n";
    echo str_repeat("=", 80) . "\n";

    // 1. design.md „ÇíËß£Êûê
    $designPath = dirname(__DIR__, 2) . "/docs/specs/$specName/design.md";
    echo "üìñ Parsing design.md...\n";

    if (!file_exists($designPath)) {
        echo YELLOW . "‚ö†Ô∏è  design.md not found at: $designPath" . NC . "\n";
        echo YELLOW . "   Skipping spec: $specName" . NC . "\n";
        return;
    }

    $designRules = parseDesignMd($designPath);

    if (empty($designRules)) {
        echo YELLOW . "‚ö†Ô∏è  No validation rules found in design.md for spec: $specName" . NC . "\n";
        echo YELLOW . "   Make sure '**„Éê„É™„Éá„Éº„Ç∑„Éß„É≥È†ÖÁõÆË©≥Á¥∞**:' section exists" . NC . "\n";
        // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„É´„Éº„É´„Åå„Å™„Åè„Å¶„ÇÇ„ÄÅ„Éö„Éº„Ç∏„Å®„É´„Éº„Éà„ÅØ„ÉÅ„Çß„ÉÉ„ÇØ„Åô„Çã
    } else {
        echo GREEN . "‚úÖ Found " . count($designRules) . " field validation rules in design.md" . NC . "\n";
        foreach ($designRules as $field => $rules) {
            echo "   - $field: {$rules['raw']}\n";
        }
    }

    // „Éï„Ç£„Éº„É´„ÉâÂêç„Éû„ÉÉ„Éî„É≥„Ç∞Ôºàdesign.md ‚Üí backendÔºâ
    $backendFieldMapping = [
        'agreeToTerms' => 'terms_agreed',
    ];

    // design.md„ÅÆ„Éï„Ç£„Éº„É´„Éâ„Çí„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÁî®„Å´„Éû„ÉÉ„Éî„É≥„Ç∞
    $backendDesignRules = [];
    foreach ($designRules as $field => $rules) {
        $backendField = $backendFieldMapping[$field] ?? $field;
        $backendDesignRules[$backendField] = $rules;
        $backendDesignRules[$backendField]['originalField'] = $field;
    }

    // 2. FormRequest „ÇíÊ§úË®º
    $formRequestClass = inferFormRequestClass($specName, $designRules);
    if ($formRequestClass && class_exists($formRequestClass)) {
        $requestRules = parseFormRequest($formRequestClass);
        validateBackendImplementation($backendDesignRules, $requestRules, basename(str_replace('\\', '/', $formRequestClass)));
    } else {
        if (!empty($designRules)) {
            echo RED . "\n‚ùå CRITICAL: FormRequest class NOT FOUND for spec: $specName" . NC . "\n";
            echo RED . "   design.md defines validation rules but backend implementation is missing" . NC . "\n";
            $errors++;
        }
    }

    // 3. Frontend „ÇíÊ§úË®º
    $frontendFile = inferFrontendFile($specName, $projectRoot);
    if ($frontendFile && file_exists($frontendFile)) {
        $frontendRules = parseFrontendValidation($frontendFile);
        validateFrontendImplementation($designRules, $frontendRules, basename($frontendFile));
    } else {
        if (!empty($designRules)) {
            echo RED . "\n‚ùå CRITICAL: Frontend file NOT FOUND for spec: $specName" . NC . "\n";
            echo RED . "   design.md defines validation rules but frontend implementation is missing" . NC . "\n";
            $errors++;
        }
    }

    // 4. „Éö„Éº„Ç∏„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆÂ≠òÂú®Á¢∫Ë™çÔºàNEWÔºâ
    $pages = extractPagesFromDesignMd($designPath);
    if (!empty($pages)) {
        validatePages($specName, $pages);
    }

    // 5. „É´„Éº„ÉàÂÆöÁæ©„ÅÆÂ≠òÂú®Á¢∫Ë™çÔºàNEWÔºâ
    $routes = extractRoutesFromDesignMd($designPath);
    if (!empty($routes)) {
        validateRoutes($specName, $routes);
    }
}

// ============================================================
// „É°„Ç§„É≥Âá¶ÁêÜ
// ============================================================

if ($specName) {
    // ÁâπÂÆö„ÅÆspec„ÅÆ„ÅøÊ§úË®º
    validateSpec($specName);
} else {
    // ÂÖ®„Å¶„ÅÆspec„ÇíÊ§úË®º
    $specsDir = dirname(__DIR__, 2) . "/docs/specs";
    $specs = [];

    if (is_dir($specsDir)) {
        $dirs = scandir($specsDir);
        foreach ($dirs as $dir) {
            if ($dir === '.' || $dir === '..') {
                continue;
            }
            $specPath = "$specsDir/$dir";
            if (is_dir($specPath) && file_exists("$specPath/design.md")) {
                $specs[] = $dir;
            }
        }
    }

    if (empty($specs)) {
        echo RED . "‚ùå No specs found in $specsDir" . NC . "\n";
        exit(1);
    }

    echo "Found " . count($specs) . " specs: " . implode(', ', $specs) . "\n";

    foreach ($specs as $spec) {
        validateSpec($spec);
    }
}

// ============================================================
// „Çµ„Éû„É™„Éº
// ============================================================
echo "\n" . str_repeat("=", 80) . "\n";
echo BLUE . "üìä Validation Integrity Summary" . NC . "\n";
echo str_repeat("=", 80) . "\n";

if ($errors === 0 && $warnings === 0) {
    echo GREEN . "‚úÖ Perfect! All validation rules match design.md (Single Source of Truth)" . NC . "\n";
    exit(0);
} elseif ($errors === 0) {
    echo YELLOW . "‚ö†Ô∏è  Found $warnings warning(s), but no critical errors" . NC . "\n";
    echo "   Review warnings to ensure consistency with design.md" . NC . "\n";
    exit(0);
} else {
    echo RED . "‚ùå Found $errors error(s) and $warnings warning(s)" . NC . "\n";
    echo "   Implementation does NOT match design.md specifications" . NC . "\n";
    echo "   Fix errors before deploying to production" . NC . "\n";
    exit(1);
}
