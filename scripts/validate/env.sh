#!/bin/bash
# Áí∞Â¢É„Éï„Ç°„Ç§„É´„ÉªÂü∫Êú¨Ë®≠ÂÆö„ÉÅ„Çß„ÉÉ„ÇØ„Çπ„ÇØ„É™„Éó„Éà
#
# „ÉÅ„Çß„ÉÉ„ÇØÂÜÖÂÆπ:
# 1. ÂøÖÈ†àÁí∞Â¢É„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç (.env, package.json, composer.json)
# 2. Docker/Sail „ÅÆËµ∑ÂãïÁä∂ÊÖãÁ¢∫Ë™ç
# 3. Âü∫Êú¨ÁöÑ„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÅÆÁ¢∫Ë™ç

set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../../.." && pwd)"
cd "$PROJECT_ROOT"

# Ëâ≤ÂÆöÁæ©
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo ""
echo "========================================================================"
echo -e "${BLUE}üîç Environment Check${NC}"
echo "========================================================================"
echo ""

EXIT_CODE=0

# ========================================================================
# 1. ÂøÖÈ†àÁí∞Â¢É„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
# ========================================================================
echo -e "${BLUE}üìù Step 1: Required Environment Files${NC}"
echo "------------------------------------------------------------------------"

REQUIRED_FILES=(
    ".env"
    "package.json"
    "composer.json"
    "vite.config.js"
    "phpunit.xml"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$PROJECT_ROOT/$file" ]; then
        echo -e "${GREEN}‚úÖ $file exists${NC}"
    else
        echo -e "${RED}‚ùå CRITICAL: $file not found${NC}"
        EXIT_CODE=1
    fi
done

# ========================================================================
# 2. Docker/Sail Ëµ∑ÂãïÁä∂ÊÖãÁ¢∫Ë™ç
# ========================================================================
echo ""
echo -e "${BLUE}üìù Step 2: Docker/Sail Status${NC}"
echo "------------------------------------------------------------------------"

if command -v docker &> /dev/null; then
    echo -e "${GREEN}‚úÖ Docker command available${NC}"

    # Sail„Ç≥„É≥„ÉÜ„Éä„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    if docker ps --format '{{.Names}}' | grep -q "laravel.test"; then
        echo -e "${GREEN}‚úÖ Laravel Sail container is running${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  WARNING: Laravel Sail container not running${NC}"
        echo "   To start: ./vendor/bin/sail up -d"
    fi
else
    echo -e "${RED}‚ùå Docker not found${NC}"
    echo "   Docker is required for this project"
    EXIT_CODE=1
fi

# ========================================================================
# 3. Âü∫Êú¨„Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†Á¢∫Ë™ç
# ========================================================================
echo ""
echo -e "${BLUE}üìù Step 3: Directory Structure${NC}"
echo "------------------------------------------------------------------------"

REQUIRED_DIRS=(
    "app"
    "resources"
    "resources/js"
    "resources/js/Pages"
    "tests"
    "tests/Unit"
    "tests/Feature"
    "tests/e2e"
    "dev-kit"
    "dev-kit/docs"
    "dev-kit/scripts"
)

for dir in "${REQUIRED_DIRS[@]}"; do
    if [ -d "$PROJECT_ROOT/$dir" ]; then
        echo -e "${GREEN}‚úÖ $dir/ exists${NC}"
    else
        echo -e "${RED}‚ùå CRITICAL: $dir/ not found${NC}"
        EXIT_CODE=1
    fi
done

# ========================================================================
# 4. Node modules / Vendor „ÉÅ„Çß„ÉÉ„ÇØ
# ========================================================================
echo ""
echo -e "${BLUE}üìù Step 4: Dependencies Installation${NC}"
echo "------------------------------------------------------------------------"

if [ -d "$PROJECT_ROOT/node_modules" ]; then
    echo -e "${GREEN}‚úÖ node_modules/ exists${NC}"
else
    echo -e "${RED}‚ùå WARNING: node_modules/ not found${NC}"
    echo "   Run: npm install"
    EXIT_CODE=1
fi

if [ -d "$PROJECT_ROOT/vendor" ]; then
    echo -e "${GREEN}‚úÖ vendor/ exists${NC}"
else
    echo -e "${RED}‚ùå WARNING: vendor/ not found${NC}"
    echo "   Run: ./vendor/bin/sail composer install"
    EXIT_CODE=1
fi

# ========================================================================
# ÊúÄÁµÇ„Çµ„Éû„É™„Éº
# ========================================================================
echo ""
echo "========================================================================"
echo -e "${BLUE}üìä Environment Check Summary${NC}"
echo "========================================================================"
echo ""

if [ $EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}‚úÖ‚úÖ‚úÖ ENVIRONMENT CHECK PASSED ‚úÖ‚úÖ‚úÖ${NC}"
    echo ""
    echo "Your environment is properly configured!"
else
    echo -e "${RED}‚ùå‚ùå‚ùå ENVIRONMENT CHECK FAILED ‚ùå‚ùå‚ùå${NC}"
    echo ""
    echo "Please fix the issues above before proceeding."
    echo ""
fi

echo "========================================================================"

exit $EXIT_CODE
