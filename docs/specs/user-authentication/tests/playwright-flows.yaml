# Playwright E2E フロー定義（機械可読形式）
# このファイルから Playwright テストコードを自動生成します

spec_name: user-authentication
version: "1.0"
base_url: "http://localhost"

# ===================================================================
# 共通設定
# ===================================================================
common:
  wait_after_click: 2000  # ms
  screenshot_dir: "docs/test-reports/screenshots/user-authentication"
  log_dir: "logs"

# ===================================================================
# フロー定義
# ===================================================================
flows:
  # -----------------------------------------------------------------
  # 正常系フロー
  # -----------------------------------------------------------------
  - id: FLOW-001
    name: "ユーザー登録"
    type: normal
    description: "新規ユーザーが登録フォームから登録を完了する"
    steps:
      - action: navigate
        url: "/register"
        wait: networkidle

      - action: type
        selector: "input[name='name']"
        value: "Test User"
        description: "名前を入力"

      - action: type
        selector: "input[name='email']"
        value: "test_{timestamp}@example.com"  # ユニーク性確保
        description: "メールアドレスを入力"

      - action: type
        selector: "input[name='password']"
        value: "password123"
        description: "パスワードを入力"

      - action: type
        selector: "input[name='password_confirmation']"
        value: "password123"
        description: "パスワード確認を入力"

      - action: click
        selector: "input[name='terms_agreed']"
        description: "利用規約に同意"

      - action: click
        selector: "button[type='submit']"
        description: "登録ボタンをクリック"
        wait: networkidle

      - action: assert_url
        expected: "/dashboard"
        description: "ダッシュボードに遷移"

      - action: screenshot
        filename: "normal/user-registration.png"

  - id: FLOW-002
    name: "ログイン"
    type: normal
    description: "既存ユーザーがログインフォームからログインする"
    prerequisite: "test@example.com / password123 が登録済み"
    steps:
      - action: navigate
        url: "/login"
        wait: networkidle

      - action: type
        selector: "input[name='email']"
        value: "test@example.com"
        description: "メールアドレスを入力"

      - action: type
        selector: "input[name='password']"
        value: "password123"
        description: "パスワードを入力"

      - action: click
        selector: "button[type='submit']"
        description: "ログインボタンをクリック"
        wait: networkidle

      - action: assert_url
        expected: "/dashboard"
        description: "ダッシュボードに遷移"

      - action: screenshot
        filename: "normal/user-login.png"

  - id: FLOW-003
    name: "ログアウト"
    type: normal
    description: "ログイン済みユーザーがログアウトする"
    prerequisite: "ログイン済み"
    steps:
      - action: navigate
        url: "/dashboard"
        wait: networkidle

      - action: click
        selector: "button:has-text('ログアウト')"
        description: "ログアウトボタンをクリック"
        wait: networkidle

      - action: assert_url
        expected: "/login"
        description: "ログイン画面に遷移"

      - action: screenshot
        filename: "normal/user-logout.png"

  - id: FLOW-004
    name: "パスワードリセット"
    type: normal
    description: "パスワードリセットリンク送信から新パスワード設定まで"
    steps:
      - action: navigate
        url: "/forgot-password"
        wait: networkidle

      - action: type
        selector: "input[name='email']"
        value: "test@example.com"
        description: "メールアドレスを入力"

      - action: click
        selector: "button[type='submit']"
        description: "送信ボタンをクリック"
        wait: networkidle

      - action: assert_text
        selector: ".alert"
        expected: "パスワードリセットリンクを送信しました"
        description: "成功メッセージ表示確認"

      - action: screenshot
        filename: "normal/password-reset-link-sent.png"

      # トークン取得（実際のメールから取得する想定）
      - action: get_reset_token
        email: "test@example.com"
        description: "リセットトークンを取得"
        save_as: "reset_token"

      - action: navigate
        url: "/reset-password/{reset_token}"
        wait: networkidle

      - action: type
        selector: "input[name='password']"
        value: "newpassword123"
        description: "新しいパスワードを入力"

      - action: type
        selector: "input[name='password_confirmation']"
        value: "newpassword123"
        description: "パスワード確認を入力"

      - action: click
        selector: "button[type='submit']"
        description: "リセットボタンをクリック"
        wait: networkidle

      - action: assert_url
        expected: "/login"
        description: "ログイン画面に遷移"

      - action: screenshot
        filename: "normal/password-reset-complete.png"

  - id: FLOW-005
    name: "画面遷移リンク"
    type: normal
    description: "ログイン画面と登録画面間のナビゲーションリンク確認"
    steps:
      - action: navigate
        url: "/login"
        wait: networkidle

      - action: click
        selector: "a:has-text('新規登録')"
        description: "新規登録リンクをクリック"
        wait: networkidle

      - action: assert_url
        expected: "/register"
        description: "登録画面に遷移"

      - action: click
        selector: "a:has-text('ログイン')"
        description: "ログインリンクをクリック"
        wait: networkidle

      - action: assert_url
        expected: "/login"
        description: "ログイン画面に遷移"

      - action: screenshot
        filename: "normal/navigation-links.png"

  # -----------------------------------------------------------------
  # 異常系フロー
  # -----------------------------------------------------------------
  - id: FLOW-006
    name: "フォームバリデーション"
    type: error
    description: "必須項目未入力でバリデーションエラー表示"
    steps:
      - action: navigate
        url: "/register"
        wait: networkidle

      - action: click
        selector: "button[type='submit']"
        description: "未入力で登録ボタンをクリック"

      - action: assert_text
        selector: ".form-error"
        expected_contains: "必須です"
        description: "バリデーションエラー表示確認"

      - action: screenshot
        filename: "error/validation-errors.png"

  - id: FLOW-007
    name: "誤ったパスワードでログイン"
    type: error
    description: "誤ったパスワードでログインしてエラーメッセージ表示"
    steps:
      - action: navigate
        url: "/login"
        wait: networkidle

      - action: type
        selector: "input[name='email']"
        value: "test@example.com"

      - action: type
        selector: "input[name='password']"
        value: "wrongpassword"

      - action: click
        selector: "button[type='submit']"
        wait: networkidle

      - action: assert_text
        selector: ".alert-error"
        expected: "メールアドレスまたはパスワードが正しくありません。"
        description: "エラーメッセージ表示確認"

      - action: screenshot
        filename: "error/login-incorrect-password.png"

  - id: FLOW-008
    name: "存在しないメールでパスワード再設定"
    type: error
    description: "DBに存在しないメールアドレスでパスワード再設定"
    steps:
      - action: navigate
        url: "/forgot-password"
        wait: networkidle

      - action: type
        selector: "input[name='email']"
        value: "notexist@example.com"

      - action: click
        selector: "button[type='submit']"
        wait: networkidle

      - action: assert_text
        selector: ".alert-error"
        expected: "メールアドレスが見つかりません。"
        description: "エラーメッセージ表示確認"

      - action: screenshot
        filename: "error/password-reset-email-not-found.png"

  - id: FLOW-009
    name: "5回連続失敗ログイン（アカウントロック）"
    type: error
    description: "5回連続でログイン失敗してアカウントロック"
    steps:
      - action: loop
        count: 5
        steps:
          - action: navigate
            url: "/login"
            wait: networkidle

          - action: type
            selector: "input[name='email']"
            value: "test@example.com"

          - action: type
            selector: "input[name='password']"
            value: "wrongpassword"

          - action: click
            selector: "button[type='submit']"
            wait: networkidle

      - action: assert_text
        selector: ".alert-error"
        expected: "アカウントがロックされました。しばらく待ってから再度お試しください。"
        description: "アカウントロックメッセージ表示確認"

      - action: screenshot
        filename: "error/account-locked.png"

  - id: FLOW-010
    name: "無効なトークンでパスワードリセット"
    type: error
    description: "無効なトークンでパスワードリセット画面にアクセス"
    steps:
      - action: navigate
        url: "/reset-password/invalid-token-12345"
        wait: networkidle

      - action: assert_text
        selector: ".alert-error"
        expected: "無効なトークンです。"
        description: "エラーメッセージ表示確認"

      - action: screenshot
        filename: "error/invalid-reset-token.png"

  - id: FLOW-011
    name: "認証ガード"
    type: error
    description: "未認証ユーザーが認証必要ページにアクセス"
    steps:
      - action: navigate
        url: "/dashboard"
        wait: networkidle

      - action: assert_url
        expected: "/login"
        description: "ログイン画面にリダイレクト"

      - action: screenshot
        filename: "error/auth-guard-redirect.png"
