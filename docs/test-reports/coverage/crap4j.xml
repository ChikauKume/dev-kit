<?xml version="1.0" encoding="UTF-8"?>
<crap_result>
  <project/>
  <timestamp>2025-10-28 07:33:23</timestamp>
  <stats>
    <name>Method Crap Stats</name>
    <methodCount>165</methodCount>
    <crapMethodCount>39</crapMethodCount>
    <crapLoad>283</crapLoad>
    <totalCrap>2787.03</totalCrap>
    <crapMethodPercent>23.64</crapMethodPercent>
  </stats>
  <methods>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\DevComplete</className>
      <methodName>handle</methodName>
      <methodSignature>handle(): int</methodSignature>
      <fullMethod>handle(): int</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\DevComplete</className>
      <methodName>runStaticAnalysis</methodName>
      <methodSignature>runStaticAnalysis(): void</methodSignature>
      <fullMethod>runStaticAnalysis(): void</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\DevComplete</className>
      <methodName>runTests</methodName>
      <methodSignature>runTests(): void</methodSignature>
      <fullMethod>runTests(): void</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\DevComplete</className>
      <methodName>generateReports</methodName>
      <methodSignature>generateReports(string $specName): void</methodSignature>
      <fullMethod>generateReports(string $specName): void</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\DevComplete</className>
      <methodName>displaySummary</methodName>
      <methodSignature>displaySummary(): void</methodSignature>
      <fullMethod>displaySummary(): void</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\E2eRun</className>
      <methodName>handle</methodName>
      <methodSignature>handle(): int</methodSignature>
      <fullMethod>handle(): int</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\E2eRun</className>
      <methodName>preflightCheck</methodName>
      <methodSignature>preflightCheck(): bool</methodSignature>
      <fullMethod>preflightCheck(): bool</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\E2eRun</className>
      <methodName>prepareDirectories</methodName>
      <methodSignature>prepareDirectories(): void</methodSignature>
      <fullMethod>prepareDirectories(): void</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\E2eRun</className>
      <methodName>displayGuide</methodName>
      <methodSignature>displayGuide(): void</methodSignature>
      <fullMethod>displayGuide(): void</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\E2eRun</className>
      <methodName>runBrowserTests</methodName>
      <methodSignature>runBrowserTests(): void</methodSignature>
      <fullMethod>runBrowserTests(): void</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\E2eRun</className>
      <methodName>verifyScreenshots</methodName>
      <methodSignature>verifyScreenshots(): void</methodSignature>
      <fullMethod>verifyScreenshots(): void</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\E2eRun</className>
      <methodName>displaySummary</methodName>
      <methodSignature>displaySummary(): void</methodSignature>
      <fullMethod>displaySummary(): void</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>handle</methodName>
      <methodSignature>handle()</methodSignature>
      <fullMethod>handle()</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>parseTestParameters</methodName>
      <methodSignature>parseTestParameters(string $content, string $specName): array</methodSignature>
      <fullMethod>parseTestParameters(string $content, string $specName): array</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>parseTableHeaders</methodName>
      <methodSignature>parseTableHeaders(string $headerLine): array</methodSignature>
      <fullMethod>parseTableHeaders(string $headerLine): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>parseTableRows</methodName>
      <methodSignature>parseTableRows(string $rowsText, array $headers): array</methodSignature>
      <fullMethod>parseTableRows(string $rowsText, array $headers): array</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>scanExistingTests</methodName>
      <methodSignature>scanExistingTests(string $specName): array</methodSignature>
      <fullMethod>scanExistingTests(string $specName): array</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>findMissingTests</methodName>
      <methodSignature>findMissingTests(array $definitions, array $existingTests, string $targetLayer): array</methodSignature>
      <fullMethod>findMissingTests(array $definitions, array $existingTests, string $targetLayer): array</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateMethodName</methodName>
      <methodSignature>generateMethodName(array $test, array $definition): string</methodSignature>
      <fullMethod>generateMethodName(array $test, array $definition): string</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>extractDistinctiveCondition</methodName>
      <methodSignature>extractDistinctiveCondition(array $test): string</methodSignature>
      <fullMethod>extractDistinctiveCondition(array $test): string</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>extractConditions</methodName>
      <methodSignature>extractConditions(array $test): string</methodSignature>
      <fullMethod>extractConditions(array $test): string</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>convertToSnakeCase</methodName>
      <methodSignature>convertToSnakeCase(string $text): string</methodSignature>
      <fullMethod>convertToSnakeCase(string $text): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>determineTestLayers</methodName>
      <methodSignature>determineTestLayers(string $useCase, string $testType): array</methodSignature>
      <fullMethod>determineTestLayers(string $useCase, string $testType): array</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>determineTestFile</methodName>
      <methodSignature>determineTestFile(string $specName, string $useCase, string $layer): string</methodSignature>
      <fullMethod>determineTestFile(string $specName, string $useCase, string $layer): string</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateTestCode</methodName>
      <methodSignature>generateTestCode(array $testData, bool $force): bool</methodSignature>
      <fullMethod>generateTestCode(array $testData, bool $force): bool</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>appendTestMethod</methodName>
      <methodSignature>appendTestMethod(string $filePath, array $testData): bool</methodSignature>
      <fullMethod>appendTestMethod(string $filePath, array $testData): bool</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>createTestFile</methodName>
      <methodSignature>createTestFile(string $filePath, array $testData): bool</methodSignature>
      <fullMethod>createTestFile(string $filePath, array $testData): bool</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateTestMethod</methodName>
      <methodSignature>generateTestMethod(array $testData): string</methodSignature>
      <fullMethod>generateTestMethod(array $testData): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateTestBody</methodName>
      <methodSignature>generateTestBody(array $testData): string</methodSignature>
      <fullMethod>generateTestBody(array $testData): string</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateApplicationTestBody</methodName>
      <methodSignature>generateApplicationTestBody(string $useCase, array $test, string $testType, string $result): string</methodSignature>
      <fullMethod>generateApplicationTestBody(string $useCase, array $test, string $testType, string $result): string</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateSuccessApplicationTest</methodName>
      <methodSignature>generateSuccessApplicationTest(string $useCase, array $test): string</methodSignature>
      <fullMethod>generateSuccessApplicationTest(string $useCase, array $test): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateFailureApplicationTest</methodName>
      <methodSignature>generateFailureApplicationTest(string $useCase, array $test, string $result): string</methodSignature>
      <fullMethod>generateFailureApplicationTest(string $useCase, array $test, string $result): string</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateDomainTestBody</methodName>
      <methodSignature>generateDomainTestBody(string $useCase, array $test, string $testType, string $result): string</methodSignature>
      <fullMethod>generateDomainTestBody(string $useCase, array $test, string $testType, string $result): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateFeatureTestBody</methodName>
      <methodSignature>generateFeatureTestBody(string $useCase, array $test, string $testType, string $result): string</methodSignature>
      <fullMethod>generateFeatureTestBody(string $useCase, array $test, string $testType, string $result): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateE2ETestBody</methodName>
      <methodSignature>generateE2ETestBody(string $useCase, array $test, string $testType, string $result): string</methodSignature>
      <fullMethod>generateE2ETestBody(string $useCase, array $test, string $testType, string $result): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>generateTestFileContent</methodName>
      <methodSignature>generateTestFileContent(array $testData): string</methodSignature>
      <fullMethod>generateTestFileContent(array $testData): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateComprehensiveTests</className>
      <methodName>determineNamespace</methodName>
      <methodSignature>determineNamespace(string $filePath): string</methodSignature>
      <fullMethod>determineNamespace(string $filePath): string</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>handle</methodName>
      <methodSignature>handle(): int</methodSignature>
      <fullMethod>handle(): int</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>processTestFile</methodName>
      <methodSignature>processTestFile(string $filePath): void</methodSignature>
      <fullMethod>processTestFile(string $filePath): void</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>parseDocblock</methodName>
      <methodSignature>parseDocblock(string $docblock, string $methodName): ?array</methodSignature>
      <fullMethod>parseDocblock(string $docblock, string $methodName): ?array</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>generatePlaywrightScript</methodName>
      <methodSignature>generatePlaywrightScript(string $fileName, array $testCases): string</methodSignature>
      <fullMethod>generatePlaywrightScript(string $fileName, array $testCases): string</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>generateTestCase</methodName>
      <methodSignature>generateTestCase(array $testInfo, int $testNumber): string</methodSignature>
      <fullMethod>generateTestCase(array $testInfo, int $testNumber): string</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>generateStepCode</methodName>
      <methodSignature>generateStepCode(string $step, int $stepNumber, bool $isError): string</methodSignature>
      <fullMethod>generateStepCode(string $step, int $stepNumber, bool $isError): string</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>extractUrlPath</methodName>
      <methodSignature>extractUrlPath(string $step): string</methodSignature>
      <fullMethod>extractUrlPath(string $step): string</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>getFieldSelector</methodName>
      <methodSignature>getFieldSelector(string $fieldName): string</methodSignature>
      <fullMethod>getFieldSelector(string $fieldName): string</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>getExpectedUrl</methodName>
      <methodSignature>getExpectedUrl(string $pageName): string</methodSignature>
      <fullMethod>getExpectedUrl(string $pageName): string</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>generateScreenshotName</methodName>
      <methodSignature>generateScreenshotName(string $methodName, bool $isError): string</methodSignature>
      <fullMethod>generateScreenshotName(string $methodName, bool $isError): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GeneratePlaywrightScripts</className>
      <methodName>displaySummary</methodName>
      <methodSignature>displaySummary(): void</methodSignature>
      <fullMethod>displaySummary(): void</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>handle</methodName>
      <methodSignature>handle(): int</methodSignature>
      <fullMethod>handle(): int</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>generateExcel</methodName>
      <methodSignature>generateExcel(array $data, string $specName): void</methodSignature>
      <fullMethod>generateExcel(array $data, string $specName): void</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>createSummarySheet</methodName>
      <methodSignature>createSummarySheet(PhpOffice\PhpSpreadsheet\Spreadsheet $spreadsheet, array $data): void</methodSignature>
      <fullMethod>createSummarySheet(PhpOffice\PhpSpreadsheet\Spreadsheet $spreadsheet, array $data): void</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>createPhpUnitSheet</methodName>
      <methodSignature>createPhpUnitSheet(PhpOffice\PhpSpreadsheet\Spreadsheet $spreadsheet, array $data): void</methodSignature>
      <fullMethod>createPhpUnitSheet(PhpOffice\PhpSpreadsheet\Spreadsheet $spreadsheet, array $data): void</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>createE2eSheet</methodName>
      <methodSignature>createE2eSheet(PhpOffice\PhpSpreadsheet\Spreadsheet $spreadsheet, array $data): void</methodSignature>
      <fullMethod>createE2eSheet(PhpOffice\PhpSpreadsheet\Spreadsheet $spreadsheet, array $data): void</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>formatTestName</methodName>
      <methodSignature>formatTestName(string $testName): string</methodSignature>
      <fullMethod>formatTestName(string $testName): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>formatTestStatus</methodName>
      <methodSignature>formatTestStatus(string $status): string</methodSignature>
      <fullMethod>formatTestStatus(string $status): string</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>extractTestItemFromDocblock</methodName>
      <methodSignature>extractTestItemFromDocblock(string $testName): string</methodSignature>
      <fullMethod>extractTestItemFromDocblock(string $testName): string</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>extractJapaneseDescriptionFromDocblock</methodName>
      <methodSignature>extractJapaneseDescriptionFromDocblock(string $testName, bool $isE2e): ?string</methodSignature>
      <fullMethod>extractJapaneseDescriptionFromDocblock(string $testName, bool $isE2e): ?string</fullMethod>
      <crap>156</crap>
      <complexity>12</complexity>
      <coverage>0</coverage>
      <crapLoad>12</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>getTestDescriptionJapanese</methodName>
      <methodSignature>getTestDescriptionJapanese(string $testName): string</methodSignature>
      <fullMethod>getTestDescriptionJapanese(string $testName): string</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>getTestClassification</methodName>
      <methodSignature>getTestClassification(string $testName): string</methodSignature>
      <fullMethod>getTestClassification(string $testName): string</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>findTestFiles</methodName>
      <methodSignature>findTestFiles(string $directory): array</methodSignature>
      <fullMethod>findTestFiles(string $directory): array</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>styleHeader</methodName>
      <methodSignature>styleHeader($sheet, string $range): void</methodSignature>
      <fullMethod>styleHeader($sheet, string $range): void</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>generatePdf</methodName>
      <methodSignature>generatePdf(array $data, string $specName): void</methodSignature>
      <fullMethod>generatePdf(array $data, string $specName): void</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>mergePlaywrightResults</methodName>
      <methodSignature>mergePlaywrightResults(array $data, string $specName): array</methodSignature>
      <fullMethod>mergePlaywrightResults(array $data, string $specName): array</fullMethod>
      <crap>182</crap>
      <complexity>13</complexity>
      <coverage>0</coverage>
      <crapLoad>13</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>parsePlaywrightResults</methodName>
      <methodSignature>parsePlaywrightResults(array $playwrightData): array</methodSignature>
      <fullMethod>parsePlaywrightResults(array $playwrightData): array</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>extractTestsFromSuite</methodName>
      <methodSignature>extractTestsFromSuite(array $suite, array $tests, string $parentTitle): void</methodSignature>
      <fullMethod>extractTestsFromSuite(array $suite, array $tests, string $parentTitle): void</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>extractCategoryFromPlaywrightTest</methodName>
      <methodSignature>extractCategoryFromPlaywrightTest(string $suiteTitle, string $testTitle): string</methodSignature>
      <fullMethod>extractCategoryFromPlaywrightTest(string $suiteTitle, string $testTitle): string</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\GenerateTestReport</className>
      <methodName>generateHtml</methodName>
      <methodSignature>generateHtml(array $data): string</methodSignature>
      <fullMethod>generateHtml(array $data): string</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\RunPlaywrightTests</className>
      <methodName>handle</methodName>
      <methodSignature>handle(): int</methodSignature>
      <fullMethod>handle(): int</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\RunPlaywrightTests</className>
      <methodName>checkPlaywrightInstalled</methodName>
      <methodSignature>checkPlaywrightInstalled(): bool</methodSignature>
      <fullMethod>checkPlaywrightInstalled(): bool</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\RunPlaywrightTests</className>
      <methodName>checkApplicationRunning</methodName>
      <methodSignature>checkApplicationRunning(): bool</methodSignature>
      <fullMethod>checkApplicationRunning(): bool</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\RunPlaywrightTests</className>
      <methodName>runPlaywrightTests</methodName>
      <methodSignature>runPlaywrightTests(string $specName): int</methodSignature>
      <fullMethod>runPlaywrightTests(string $specName): int</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\RunPlaywrightTests</className>
      <methodName>displayResults</methodName>
      <methodSignature>displayResults(int $exitCode): void</methodSignature>
      <fullMethod>displayResults(int $exitCode): void</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\TestRun</className>
      <methodName>handle</methodName>
      <methodSignature>handle(): int</methodSignature>
      <fullMethod>handle(): int</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\TestRun</className>
      <methodName>runStep</methodName>
      <methodSignature>runStep(string $stepNumber, string $description, callable $callback): bool</methodSignature>
      <fullMethod>runStep(string $stepNumber, string $description, callable $callback): bool</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Console\Commands</package>
      <className>App\Console\Commands\TestRun</className>
      <methodName>runArtisanTest</methodName>
      <methodSignature>runArtisanTest(): int</methodSignature>
      <fullMethod>runArtisanTest(): int</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Http\Middleware</package>
      <className>App\Http\Middleware\HandleInertiaRequests</className>
      <methodName>version</methodName>
      <methodSignature>version(Illuminate\Http\Request $request): ?string</methodSignature>
      <fullMethod>version(Illuminate\Http\Request $request): ?string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Http\Middleware</package>
      <className>App\Http\Middleware\HandleInertiaRequests</className>
      <methodName>share</methodName>
      <methodSignature>share(Illuminate\Http\Request $request): array</methodSignature>
      <fullMethod>share(Illuminate\Http\Request $request): array</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>94.12</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Models</package>
      <className>App\Models\User</className>
      <methodName>casts</methodName>
      <methodSignature>casts(): array</methodSignature>
      <fullMethod>casts(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\DTOs</package>
      <className>App\Modules\User\Application\DTOs\LoginData</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(string $email, string $password, bool $remember)</methodSignature>
      <fullMethod>__construct(string $email, string $password, bool $remember)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\DTOs</package>
      <className>App\Modules\User\Application\DTOs\UserData</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(?int $id, string $name, string $email, string $role, bool $isAdmin)</methodSignature>
      <fullMethod>__construct(?int $id, string $name, string $email, string $role, bool $isAdmin)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\DTOs</package>
      <className>App\Modules\User\Application\DTOs\UserData</className>
      <methodName>from</methodName>
      <methodSignature>from(App\Modules\User\Domain\User $user): self</methodSignature>
      <fullMethod>from(App\Modules\User\Domain\User $user): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\DTOs</package>
      <className>App\Modules\User\Application\DTOs\UserData</className>
      <methodName>toArray</methodName>
      <methodSignature>toArray(): array</methodSignature>
      <fullMethod>toArray(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\UseCases</package>
      <className>App\Modules\User\Application\UseCases\LoginUser</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(App\Modules\User\Domain\UserRepositoryInterface $userRepository)</methodSignature>
      <fullMethod>__construct(App\Modules\User\Domain\UserRepositoryInterface $userRepository)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\UseCases</package>
      <className>App\Modules\User\Application\UseCases\LoginUser</className>
      <methodName>execute</methodName>
      <methodSignature>execute(App\Modules\User\Application\DTOs\LoginData $loginData): App\Modules\User\Application\DTOs\UserData</methodSignature>
      <fullMethod>execute(App\Modules\User\Application\DTOs\LoginData $loginData): App\Modules\User\Application\DTOs\UserData</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\UseCases</package>
      <className>App\Modules\User\Application\UseCases\LogoutUser</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(App\Modules\User\Domain\UserRepositoryInterface $userRepository)</methodSignature>
      <fullMethod>__construct(App\Modules\User\Domain\UserRepositoryInterface $userRepository)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\UseCases</package>
      <className>App\Modules\User\Application\UseCases\LogoutUser</className>
      <methodName>execute</methodName>
      <methodSignature>execute(int $userId): void</methodSignature>
      <fullMethod>execute(int $userId): void</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\UseCases</package>
      <className>App\Modules\User\Application\UseCases\RegisterUser</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(App\Modules\User\Domain\UserRepositoryInterface $userRepository)</methodSignature>
      <fullMethod>__construct(App\Modules\User\Domain\UserRepositoryInterface $userRepository)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\UseCases</package>
      <className>App\Modules\User\Application\UseCases\RegisterUser</className>
      <methodName>execute</methodName>
      <methodSignature>execute(string $name, string $email, string $password): App\Modules\User\Application\DTOs\UserData</methodSignature>
      <fullMethod>execute(string $name, string $email, string $password): App\Modules\User\Application\DTOs\UserData</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\UseCases</package>
      <className>App\Modules\User\Application\UseCases\ResetPassword</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(App\Modules\User\Domain\UserRepositoryInterface $userRepository)</methodSignature>
      <fullMethod>__construct(App\Modules\User\Domain\UserRepositoryInterface $userRepository)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\UseCases</package>
      <className>App\Modules\User\Application\UseCases\ResetPassword</className>
      <methodName>execute</methodName>
      <methodSignature>execute(string $email, string $token, string $newPassword): void</methodSignature>
      <fullMethod>execute(string $email, string $token, string $newPassword): void</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\UseCases</package>
      <className>App\Modules\User\Application\UseCases\SendPasswordResetLink</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(App\Modules\User\Domain\UserRepositoryInterface $userRepository)</methodSignature>
      <fullMethod>__construct(App\Modules\User\Domain\UserRepositoryInterface $userRepository)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Application\UseCases</package>
      <className>App\Modules\User\Application\UseCases\SendPasswordResetLink</className>
      <methodName>execute</methodName>
      <methodSignature>execute(string $email): void</methodSignature>
      <fullMethod>execute(string $email): void</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\Exceptions</package>
      <className>App\Modules\User\Domain\Exceptions\InvalidEmailException</className>
      <methodName>empty</methodName>
      <methodSignature>empty(): self</methodSignature>
      <fullMethod>empty(): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\Exceptions</package>
      <className>App\Modules\User\Domain\Exceptions\InvalidEmailException</className>
      <methodName>invalidFormat</methodName>
      <methodSignature>invalidFormat(string $email): self</methodSignature>
      <fullMethod>invalidFormat(string $email): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\Exceptions</package>
      <className>App\Modules\User\Domain\Exceptions\InvalidEmailException</className>
      <methodName>tooLong</methodName>
      <methodSignature>tooLong(string $email): self</methodSignature>
      <fullMethod>tooLong(string $email): self</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\Exceptions</package>
      <className>App\Modules\User\Domain\Exceptions\UserNotFoundException</className>
      <methodName>withId</methodName>
      <methodSignature>withId(int $id): self</methodSignature>
      <fullMethod>withId(int $id): self</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\Exceptions</package>
      <className>App\Modules\User\Domain\Exceptions\UserNotFoundException</className>
      <methodName>withEmail</methodName>
      <methodSignature>withEmail(string $email): self</methodSignature>
      <fullMethod>withEmail(string $email): self</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\Exceptions</package>
      <className>App\Modules\User\Domain\Exceptions\WeakPasswordException</className>
      <methodName>empty</methodName>
      <methodSignature>empty(): self</methodSignature>
      <fullMethod>empty(): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\Exceptions</package>
      <className>App\Modules\User\Domain\Exceptions\WeakPasswordException</className>
      <methodName>tooShort</methodName>
      <methodSignature>tooShort(): self</methodSignature>
      <fullMethod>tooShort(): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\Exceptions</package>
      <className>App\Modules\User\Domain\Exceptions\WeakPasswordException</className>
      <methodName>noAlphanumeric</methodName>
      <methodSignature>noAlphanumeric(): self</methodSignature>
      <fullMethod>noAlphanumeric(): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(?int $id, string $name, App\Modules\User\Domain\ValueObjects\Email $email, App\Modules\User\Domain\ValueObjects\HashedPassword $password, string $role, ?string $rememberToken)</methodSignature>
      <fullMethod>__construct(?int $id, string $name, App\Modules\User\Domain\ValueObjects\Email $email, App\Modules\User\Domain\ValueObjects\HashedPassword $password, string $role, ?string $rememberToken)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>create</methodName>
      <methodSignature>create(string $name, App\Modules\User\Domain\ValueObjects\Email $email, App\Modules\User\Domain\ValueObjects\HashedPassword $password): self</methodSignature>
      <fullMethod>create(string $name, App\Modules\User\Domain\ValueObjects\Email $email, App\Modules\User\Domain\ValueObjects\HashedPassword $password): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>reconstruct</methodName>
      <methodSignature>reconstruct(int $id, string $name, App\Modules\User\Domain\ValueObjects\Email $email, App\Modules\User\Domain\ValueObjects\HashedPassword $password, string $role, ?string $rememberToken): self</methodSignature>
      <fullMethod>reconstruct(int $id, string $name, App\Modules\User\Domain\ValueObjects\Email $email, App\Modules\User\Domain\ValueObjects\HashedPassword $password, string $role, ?string $rememberToken): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>verifyPassword</methodName>
      <methodSignature>verifyPassword(string $plainPassword): bool</methodSignature>
      <fullMethod>verifyPassword(string $plainPassword): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>updatePassword</methodName>
      <methodSignature>updatePassword(App\Modules\User\Domain\ValueObjects\HashedPassword $newPassword): void</methodSignature>
      <fullMethod>updatePassword(App\Modules\User\Domain\ValueObjects\HashedPassword $newPassword): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>updateRememberToken</methodName>
      <methodSignature>updateRememberToken(string $token): void</methodSignature>
      <fullMethod>updateRememberToken(string $token): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>isAdmin</methodName>
      <methodSignature>isAdmin(): bool</methodSignature>
      <fullMethod>isAdmin(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>isUser</methodName>
      <methodSignature>isUser(): bool</methodSignature>
      <fullMethod>isUser(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>getId</methodName>
      <methodSignature>getId(): ?int</methodSignature>
      <fullMethod>getId(): ?int</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>getName</methodName>
      <methodSignature>getName(): string</methodSignature>
      <fullMethod>getName(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>getEmail</methodName>
      <methodSignature>getEmail(): App\Modules\User\Domain\ValueObjects\Email</methodSignature>
      <fullMethod>getEmail(): App\Modules\User\Domain\ValueObjects\Email</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>getPassword</methodName>
      <methodSignature>getPassword(): App\Modules\User\Domain\ValueObjects\HashedPassword</methodSignature>
      <fullMethod>getPassword(): App\Modules\User\Domain\ValueObjects\HashedPassword</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>getRole</methodName>
      <methodSignature>getRole(): string</methodSignature>
      <fullMethod>getRole(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain</package>
      <className>App\Modules\User\Domain\User</className>
      <methodName>getRememberToken</methodName>
      <methodSignature>getRememberToken(): ?string</methodSignature>
      <fullMethod>getRememberToken(): ?string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\Email</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(string $value)</methodSignature>
      <fullMethod>__construct(string $value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\Email</className>
      <methodName>from</methodName>
      <methodSignature>from(string $value): self</methodSignature>
      <fullMethod>from(string $value): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\Email</className>
      <methodName>validate</methodName>
      <methodSignature>validate(): void</methodSignature>
      <fullMethod>validate(): void</fullMethod>
      <crap>4.07</crap>
      <complexity>4</complexity>
      <coverage>83.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\Email</className>
      <methodName>equals</methodName>
      <methodSignature>equals(self $other): bool</methodSignature>
      <fullMethod>equals(self $other): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\Email</className>
      <methodName>toString</methodName>
      <methodSignature>toString(): string</methodSignature>
      <fullMethod>toString(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\HashedPassword</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(string $hashedValue)</methodSignature>
      <fullMethod>__construct(string $hashedValue)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\HashedPassword</className>
      <methodName>fromPlainText</methodName>
      <methodSignature>fromPlainText(string $plainPassword): self</methodSignature>
      <fullMethod>fromPlainText(string $plainPassword): self</fullMethod>
      <crap>2.03</crap>
      <complexity>2</complexity>
      <coverage>80</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\HashedPassword</className>
      <methodName>fromHash</methodName>
      <methodSignature>fromHash(string $hashedValue): self</methodSignature>
      <fullMethod>fromHash(string $hashedValue): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\HashedPassword</className>
      <methodName>validatePlainPassword</methodName>
      <methodSignature>validatePlainPassword(string $plainPassword): void</methodSignature>
      <fullMethod>validatePlainPassword(string $plainPassword): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\HashedPassword</className>
      <methodName>verify</methodName>
      <methodSignature>verify(string $plainPassword): bool</methodSignature>
      <fullMethod>verify(string $plainPassword): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Domain\ValueObjects</package>
      <className>App\Modules\User\Domain\ValueObjects\HashedPassword</className>
      <methodName>toString</methodName>
      <methodSignature>toString(): string</methodSignature>
      <fullMethod>toString(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Infrastructure</package>
      <className>App\Modules\User\Infrastructure\EloquentUserRepository</className>
      <methodName>findById</methodName>
      <methodSignature>findById(int $id): ?App\Modules\User\Domain\User</methodSignature>
      <fullMethod>findById(int $id): ?App\Modules\User\Domain\User</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Infrastructure</package>
      <className>App\Modules\User\Infrastructure\EloquentUserRepository</className>
      <methodName>findByEmail</methodName>
      <methodSignature>findByEmail(App\Modules\User\Domain\ValueObjects\Email $email): ?App\Modules\User\Domain\User</methodSignature>
      <fullMethod>findByEmail(App\Modules\User\Domain\ValueObjects\Email $email): ?App\Modules\User\Domain\User</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Infrastructure</package>
      <className>App\Modules\User\Infrastructure\EloquentUserRepository</className>
      <methodName>save</methodName>
      <methodSignature>save(App\Modules\User\Domain\User $user): void</methodSignature>
      <fullMethod>save(App\Modules\User\Domain\User $user): void</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Infrastructure</package>
      <className>App\Modules\User\Infrastructure\EloquentUserRepository</className>
      <methodName>delete</methodName>
      <methodSignature>delete(int $id): void</methodSignature>
      <fullMethod>delete(int $id): void</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Infrastructure</package>
      <className>App\Modules\User\Infrastructure\EloquentUserRepository</className>
      <methodName>existsByEmail</methodName>
      <methodSignature>existsByEmail(App\Modules\User\Domain\ValueObjects\Email $email): bool</methodSignature>
      <fullMethod>existsByEmail(App\Modules\User\Domain\ValueObjects\Email $email): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Infrastructure</package>
      <className>App\Modules\User\Infrastructure\EloquentUserRepository</className>
      <methodName>toDomain</methodName>
      <methodSignature>toDomain(App\Modules\User\Infrastructure\UserModel $model): App\Modules\User\Domain\User</methodSignature>
      <fullMethod>toDomain(App\Modules\User\Infrastructure\UserModel $model): App\Modules\User\Domain\User</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Infrastructure</package>
      <className>App\Modules\User\Infrastructure\EloquentUserRepository</className>
      <methodName>toModel</methodName>
      <methodSignature>toModel(App\Modules\User\Domain\User $user): App\Modules\User\Infrastructure\UserModel</methodSignature>
      <fullMethod>toModel(App\Modules\User\Domain\User $user): App\Modules\User\Infrastructure\UserModel</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\AuthController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(App\Modules\User\Application\UseCases\RegisterUser $registerUser, App\Modules\User\Application\UseCases\LoginUser $loginUser, App\Modules\User\Application\UseCases\LogoutUser $logoutUser)</methodSignature>
      <fullMethod>__construct(App\Modules\User\Application\UseCases\RegisterUser $registerUser, App\Modules\User\Application\UseCases\LoginUser $loginUser, App\Modules\User\Application\UseCases\LogoutUser $logoutUser)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\AuthController</className>
      <methodName>showSignup</methodName>
      <methodSignature>showSignup(): Inertia\Response</methodSignature>
      <fullMethod>showSignup(): Inertia\Response</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\AuthController</className>
      <methodName>signup</methodName>
      <methodSignature>signup(App\Modules\User\Presentation\Requests\RegisterRequest $request): Illuminate\Http\RedirectResponse</methodSignature>
      <fullMethod>signup(App\Modules\User\Presentation\Requests\RegisterRequest $request): Illuminate\Http\RedirectResponse</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\AuthController</className>
      <methodName>showSignupConfirm</methodName>
      <methodSignature>showSignupConfirm(): \Inertia\Response|\Illuminate\Http\RedirectResponse</methodSignature>
      <fullMethod>showSignupConfirm(): \Inertia\Response|\Illuminate\Http\RedirectResponse</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\AuthController</className>
      <methodName>signupConfirm</methodName>
      <methodSignature>signupConfirm(): Illuminate\Http\RedirectResponse</methodSignature>
      <fullMethod>signupConfirm(): Illuminate\Http\RedirectResponse</fullMethod>
      <crap>5.93</crap>
      <complexity>5</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\AuthController</className>
      <methodName>showSignupComplete</methodName>
      <methodSignature>showSignupComplete(): Inertia\Response</methodSignature>
      <fullMethod>showSignupComplete(): Inertia\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\AuthController</className>
      <methodName>showLogin</methodName>
      <methodSignature>showLogin(): Inertia\Response</methodSignature>
      <fullMethod>showLogin(): Inertia\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\AuthController</className>
      <methodName>login</methodName>
      <methodSignature>login(App\Modules\User\Presentation\Requests\LoginRequest $request): Illuminate\Http\RedirectResponse</methodSignature>
      <fullMethod>login(App\Modules\User\Presentation\Requests\LoginRequest $request): Illuminate\Http\RedirectResponse</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\AuthController</className>
      <methodName>logout</methodName>
      <methodSignature>logout(): Illuminate\Http\RedirectResponse</methodSignature>
      <fullMethod>logout(): Illuminate\Http\RedirectResponse</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\PasswordResetController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(App\Modules\User\Application\UseCases\SendPasswordResetLink $sendPasswordResetLink, App\Modules\User\Application\UseCases\ResetPassword $resetPassword)</methodSignature>
      <fullMethod>__construct(App\Modules\User\Application\UseCases\SendPasswordResetLink $sendPasswordResetLink, App\Modules\User\Application\UseCases\ResetPassword $resetPassword)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\PasswordResetController</className>
      <methodName>showForgotPassword</methodName>
      <methodSignature>showForgotPassword(): Inertia\Response</methodSignature>
      <fullMethod>showForgotPassword(): Inertia\Response</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\PasswordResetController</className>
      <methodName>sendResetLink</methodName>
      <methodSignature>sendResetLink(App\Modules\User\Presentation\Requests\ForgotPasswordRequest $request): Illuminate\Http\RedirectResponse</methodSignature>
      <fullMethod>sendResetLink(App\Modules\User\Presentation\Requests\ForgotPasswordRequest $request): Illuminate\Http\RedirectResponse</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\PasswordResetController</className>
      <methodName>showResetPassword</methodName>
      <methodSignature>showResetPassword(string $token): Inertia\Response</methodSignature>
      <fullMethod>showResetPassword(string $token): Inertia\Response</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Controllers</package>
      <className>App\Modules\User\Presentation\Controllers\PasswordResetController</className>
      <methodName>resetPassword</methodName>
      <methodSignature>resetPassword(App\Modules\User\Presentation\Requests\ResetPasswordRequest $request): Illuminate\Http\RedirectResponse</methodSignature>
      <fullMethod>resetPassword(App\Modules\User\Presentation\Requests\ResetPasswordRequest $request): Illuminate\Http\RedirectResponse</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\ForgotPasswordRequest</className>
      <methodName>authorize</methodName>
      <methodSignature>authorize(): bool</methodSignature>
      <fullMethod>authorize(): bool</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\ForgotPasswordRequest</className>
      <methodName>rules</methodName>
      <methodSignature>rules(): array</methodSignature>
      <fullMethod>rules(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\ForgotPasswordRequest</className>
      <methodName>attributes</methodName>
      <methodSignature>attributes(): array</methodSignature>
      <fullMethod>attributes(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\LoginRequest</className>
      <methodName>authorize</methodName>
      <methodSignature>authorize(): bool</methodSignature>
      <fullMethod>authorize(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\LoginRequest</className>
      <methodName>rules</methodName>
      <methodSignature>rules(): array</methodSignature>
      <fullMethod>rules(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\LoginRequest</className>
      <methodName>attributes</methodName>
      <methodSignature>attributes(): array</methodSignature>
      <fullMethod>attributes(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\LoginRequest</className>
      <methodName>toDTO</methodName>
      <methodSignature>toDTO(): App\Modules\User\Application\DTOs\LoginData</methodSignature>
      <fullMethod>toDTO(): App\Modules\User\Application\DTOs\LoginData</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\RegisterRequest</className>
      <methodName>authorize</methodName>
      <methodSignature>authorize(): bool</methodSignature>
      <fullMethod>authorize(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\RegisterRequest</className>
      <methodName>rules</methodName>
      <methodSignature>rules(): array</methodSignature>
      <fullMethod>rules(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\RegisterRequest</className>
      <methodName>attributes</methodName>
      <methodSignature>attributes(): array</methodSignature>
      <fullMethod>attributes(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\RegisterRequest</className>
      <methodName>messages</methodName>
      <methodSignature>messages(): array</methodSignature>
      <fullMethod>messages(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\ResetPasswordRequest</className>
      <methodName>authorize</methodName>
      <methodSignature>authorize(): bool</methodSignature>
      <fullMethod>authorize(): bool</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\ResetPasswordRequest</className>
      <methodName>rules</methodName>
      <methodSignature>rules(): array</methodSignature>
      <fullMethod>rules(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\ResetPasswordRequest</className>
      <methodName>attributes</methodName>
      <methodSignature>attributes(): array</methodSignature>
      <fullMethod>attributes(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Presentation\Requests</package>
      <className>App\Modules\User\Presentation\Requests\ResetPasswordRequest</className>
      <methodName>messages</methodName>
      <methodSignature>messages(): array</methodSignature>
      <fullMethod>messages(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Providers</package>
      <className>App\Modules\User\Providers\UserServiceProvider</className>
      <methodName>register</methodName>
      <methodSignature>register(): void</methodSignature>
      <fullMethod>register(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Modules\User\Providers</package>
      <className>App\Modules\User\Providers\UserServiceProvider</className>
      <methodName>boot</methodName>
      <methodSignature>boot(): void</methodSignature>
      <fullMethod>boot(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Providers</package>
      <className>App\Providers\AppServiceProvider</className>
      <methodName>register</methodName>
      <methodSignature>register(): void</methodSignature>
      <fullMethod>register(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Providers</package>
      <className>App\Providers\AppServiceProvider</className>
      <methodName>boot</methodName>
      <methodSignature>boot(): void</methodSignature>
      <fullMethod>boot(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
  </methods>
</crap_result>
